{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOXWIoJsHc1AOveTinDjQ7q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/toshkar/SBER-model/blob/main/Untitled_1_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2 - 38:00 - доступ ко всем его colab файлам находится на гитхабе WISEPLAT/_NN\n",
        "# модель не учитывает сплиты и дивиденды\n",
        "# (с) модель обучается на 85% предыдущих данных до 2018 года, а тестирует их на 15% последних данных\n",
        "# нормализация простая и взята из первоначального англоязычного файла 24:00 - в окне обучения все цены делятся на первую цену за вычетом единички, а он хочет сделать по изменению процентов (процентное изменение по цене)"
      ],
      "metadata": {
        "id": "LQj2gyQ-48VL"
      },
      "execution_count": 325,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# активация TensorBoard\n",
        "# Load the Tensorboard notebook extension\n",
        "%load_ext tensorboard\n",
        "# Clear any logs from previous runs\n",
        "!rm -rf ./logs/\n",
        "# Log dir for TensorBoard\n",
        "from datetime import datetime\n",
        "log_dir = \"logs/fit/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ejk_QcZV3KQ0",
        "outputId": "d302acc9-5095-4ff5-83b7-ad20b32f5a25"
      },
      "execution_count": 326,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The tensorboard extension is already loaded. To reload it, use:\n",
            "  %reload_ext tensorboard\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 327,
      "metadata": {
        "id": "8sKdbeuk6Ibe"
      },
      "outputs": [],
      "source": [
        "# импортируем необходимые библиотеки\n",
        "# TensorFlow and tf.keras\n",
        "import tensorflow as tf\n",
        "\n",
        "# Helper libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt # чтобы рисовать из matplotlib\n",
        "\n",
        "import pandas as pd\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Model #basic class for specifying and training a neural network\n",
        "from keras.layers import Input, Dense, LSTM, Dropout\n",
        "from tensorflow.keras.layers import BatchNormalization #from keras.layers.normalization import BatchNormalization\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint"
      ],
      "metadata": {
        "id": "V02vm7vJ67Zd"
      },
      "execution_count": 328,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# daily price from github\n",
        "# эта часть используется для загрузки из csv, если не настроен онлайн вывод. Его настройку объясняет в предыдущих видео с помощью баз данных\n",
        "filename = ('https://raw.githubusercontent.com/WISEPLAT/SBER-LSTM-Neural-Network-for-Time-Series-Prediction/master/data/SBER_D1.csv')\n",
        "df = pd.read_csv(filename, sep=\",\")\n",
        "print(df.shape, df.columns)\n",
        "# Для Финама - df.rename(columns={\"<DATE>\": \"Date\", \"<TIME>\": \"Time\", \"<OPEN>\": \"Open\", \"<HIGH>\": \"High\", \"<LOW>\": \"Low\",\"<CLOSE>\": \"Close\", \"<VOL>\": \"Volume\"}, inplace=True)\n",
        "# print(df.shape, df.columns)\n",
        "# df['Date'] = pd.to_datetime(df['Date'], format='%Y%m%d')\n",
        "df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')\n",
        "# print(df.shape, df.columns)\n",
        "# df = df.drop('Time', 1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YEKDLUp3ptV1",
        "outputId": "076a5297-59e7-4e6f-f41e-af931a27c9db"
      },
      "execution_count": 329,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5665, 6) Index(['Date', 'Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "pofN0hYN2Yjg",
        "outputId": "d0ddce54-2e8f-40eb-8214-61a50667e044"
      },
      "execution_count": 330,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date    Open    High     Low   Close      Volume\n",
              "0    1999-06-01    0.54    0.54    0.53    0.53       778.0\n",
              "1    1999-06-02    0.53    0.53    0.49    0.50      1926.0\n",
              "2    1999-06-03    0.49    0.54    0.49    0.53      3346.0\n",
              "3    1999-06-04    0.54    0.55    0.53    0.55      4694.0\n",
              "4    1999-06-07    0.55    0.57    0.55    0.56      3505.0\n",
              "...         ...     ...     ...     ...     ...         ...\n",
              "5660 2022-02-02  265.88  266.91  254.52  261.00  17021508.0\n",
              "5661 2022-02-03  258.45  259.87  250.06  250.79  15116578.0\n",
              "5662 2022-02-04  251.99  259.74  251.91  256.53  12703518.0\n",
              "5663 2022-02-07  256.99  260.53  253.52  257.61   8558821.0\n",
              "5664 2022-02-08  257.60  269.90  256.52  269.80  16152695.0\n",
              "\n",
              "[5665 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d83a5b3-8790-4a07-91dd-6c60adeb1443\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1999-06-01</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>778.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1999-06-02</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.49</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1926.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1999-06-03</td>\n",
              "      <td>0.49</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.49</td>\n",
              "      <td>0.53</td>\n",
              "      <td>3346.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1999-06-04</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.55</td>\n",
              "      <td>4694.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1999-06-07</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.56</td>\n",
              "      <td>3505.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5660</th>\n",
              "      <td>2022-02-02</td>\n",
              "      <td>265.88</td>\n",
              "      <td>266.91</td>\n",
              "      <td>254.52</td>\n",
              "      <td>261.00</td>\n",
              "      <td>17021508.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5661</th>\n",
              "      <td>2022-02-03</td>\n",
              "      <td>258.45</td>\n",
              "      <td>259.87</td>\n",
              "      <td>250.06</td>\n",
              "      <td>250.79</td>\n",
              "      <td>15116578.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5662</th>\n",
              "      <td>2022-02-04</td>\n",
              "      <td>251.99</td>\n",
              "      <td>259.74</td>\n",
              "      <td>251.91</td>\n",
              "      <td>256.53</td>\n",
              "      <td>12703518.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5663</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>256.99</td>\n",
              "      <td>260.53</td>\n",
              "      <td>253.52</td>\n",
              "      <td>257.61</td>\n",
              "      <td>8558821.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5664</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>257.60</td>\n",
              "      <td>269.90</td>\n",
              "      <td>256.52</td>\n",
              "      <td>269.80</td>\n",
              "      <td>16152695.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5665 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d83a5b3-8790-4a07-91dd-6c60adeb1443')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d83a5b3-8790-4a07-91dd-6c60adeb1443 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d83a5b3-8790-4a07-91dd-6c60adeb1443');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e52fdd1b-a313-4a43-85d6-19f17c9784aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e52fdd1b-a313-4a43-85d6-19f17c9784aa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e52fdd1b-a313-4a43-85d6-19f17c9784aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 330
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Close\"].max(), df[\"Close\"].min()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3SJd87_c-Y7W",
        "outputId": "48c03dfd-1029-4efd-a491-da03a5d15dc9"
      },
      "execution_count": 331,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(387.6, 0.5)"
            ]
          },
          "metadata": {},
          "execution_count": 331
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_close = df.loc[:, 'Close'] # при желании можно и по объему\n",
        "close_price = df_close.tolist()\n",
        "plt.plot(close_price)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "AyBb3QgXBE-E",
        "outputId": "a5647f02-4eed-4382-b85c-618ebc175e85"
      },
      "execution_count": 332,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# оставляем последние 3 с хвостом года\n",
        "df = df[-365*3:]"
      ],
      "metadata": {
        "id": "1rH1o-GwDSg0"
      },
      "execution_count": 333,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "FnTEsmShDkGT",
        "outputId": "4dde0fb7-c5cd-49a2-f5f3-122dfe75cce2"
      },
      "execution_count": 334,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date    Open    High     Low   Close      Volume\n",
              "4570 2017-10-10  194.30  194.45  192.95  193.21   1781678.0\n",
              "4571 2017-10-11  193.94  196.75  193.56  195.83   5793777.0\n",
              "4572 2017-10-12  195.83  196.75  194.95  195.51   3491602.0\n",
              "4573 2017-10-13  195.63  197.29  195.20  196.48   3031997.0\n",
              "4574 2017-10-16  197.53  198.52  196.70  197.70   2689343.0\n",
              "...         ...     ...     ...     ...     ...         ...\n",
              "5660 2022-02-02  265.88  266.91  254.52  261.00  17021508.0\n",
              "5661 2022-02-03  258.45  259.87  250.06  250.79  15116578.0\n",
              "5662 2022-02-04  251.99  259.74  251.91  256.53  12703518.0\n",
              "5663 2022-02-07  256.99  260.53  253.52  257.61   8558821.0\n",
              "5664 2022-02-08  257.60  269.90  256.52  269.80  16152695.0\n",
              "\n",
              "[1095 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5de19d3c-432a-4f84-ab32-3f9782ceeea6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4570</th>\n",
              "      <td>2017-10-10</td>\n",
              "      <td>194.30</td>\n",
              "      <td>194.45</td>\n",
              "      <td>192.95</td>\n",
              "      <td>193.21</td>\n",
              "      <td>1781678.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4571</th>\n",
              "      <td>2017-10-11</td>\n",
              "      <td>193.94</td>\n",
              "      <td>196.75</td>\n",
              "      <td>193.56</td>\n",
              "      <td>195.83</td>\n",
              "      <td>5793777.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4572</th>\n",
              "      <td>2017-10-12</td>\n",
              "      <td>195.83</td>\n",
              "      <td>196.75</td>\n",
              "      <td>194.95</td>\n",
              "      <td>195.51</td>\n",
              "      <td>3491602.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4573</th>\n",
              "      <td>2017-10-13</td>\n",
              "      <td>195.63</td>\n",
              "      <td>197.29</td>\n",
              "      <td>195.20</td>\n",
              "      <td>196.48</td>\n",
              "      <td>3031997.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4574</th>\n",
              "      <td>2017-10-16</td>\n",
              "      <td>197.53</td>\n",
              "      <td>198.52</td>\n",
              "      <td>196.70</td>\n",
              "      <td>197.70</td>\n",
              "      <td>2689343.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5660</th>\n",
              "      <td>2022-02-02</td>\n",
              "      <td>265.88</td>\n",
              "      <td>266.91</td>\n",
              "      <td>254.52</td>\n",
              "      <td>261.00</td>\n",
              "      <td>17021508.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5661</th>\n",
              "      <td>2022-02-03</td>\n",
              "      <td>258.45</td>\n",
              "      <td>259.87</td>\n",
              "      <td>250.06</td>\n",
              "      <td>250.79</td>\n",
              "      <td>15116578.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5662</th>\n",
              "      <td>2022-02-04</td>\n",
              "      <td>251.99</td>\n",
              "      <td>259.74</td>\n",
              "      <td>251.91</td>\n",
              "      <td>256.53</td>\n",
              "      <td>12703518.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5663</th>\n",
              "      <td>2022-02-07</td>\n",
              "      <td>256.99</td>\n",
              "      <td>260.53</td>\n",
              "      <td>253.52</td>\n",
              "      <td>257.61</td>\n",
              "      <td>8558821.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5664</th>\n",
              "      <td>2022-02-08</td>\n",
              "      <td>257.60</td>\n",
              "      <td>269.90</td>\n",
              "      <td>256.52</td>\n",
              "      <td>269.80</td>\n",
              "      <td>16152695.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1095 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5de19d3c-432a-4f84-ab32-3f9782ceeea6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5de19d3c-432a-4f84-ab32-3f9782ceeea6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5de19d3c-432a-4f84-ab32-3f9782ceeea6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d32ce4db-fb65-4a92-8abf-04e71474760c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d32ce4db-fb65-4a92-8abf-04e71474760c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d32ce4db-fb65-4a92-8abf-04e71474760c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 334
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_close = df.loc[:, 'Close']\n",
        "close_price = df_close.tolist()\n",
        "plt.plot(close_price)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "Kg4pBzKbHN92",
        "outputId": "9e94e635-ac41-4d30-e7d2-422937fbf820"
      },
      "execution_count": 335,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Close\"].max(), df[\"Close\"].min()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HDfQkQMHaAE",
        "outputId": "12c5dbe5-405d-46ec-f8ef-cfc38585fc5e"
      },
      "execution_count": 336,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(387.6, 169.36)"
            ]
          },
          "metadata": {},
          "execution_count": 336
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape\n",
        "df.info()\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "neKlPgkyHk2d",
        "outputId": "b4fd1757-4897-45c2-b425-93f0f53081a6"
      },
      "execution_count": 337,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1095 entries, 4570 to 5664\n",
            "Data columns (total 6 columns):\n",
            " #   Column  Non-Null Count  Dtype         \n",
            "---  ------  --------------  -----         \n",
            " 0   Date    1095 non-null   datetime64[ns]\n",
            " 1   Open    1095 non-null   float64       \n",
            " 2   High    1095 non-null   float64       \n",
            " 3   Low     1095 non-null   float64       \n",
            " 4   Close   1095 non-null   float64       \n",
            " 5   Volume  1095 non-null   float64       \n",
            "dtypes: datetime64[ns](1), float64(5)\n",
            "memory usage: 51.5 KB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Open         High          Low        Close        Volume\n",
              "count  1095.000000  1095.000000  1095.000000  1095.000000  1.095000e+03\n",
              "mean    243.194283   246.005708   240.125918   243.186831  6.231137e+06\n",
              "std      44.322538    44.570660    43.903732    44.276109  4.339256e+06\n",
              "min     170.230000   172.670000   165.900000   169.360000  6.450540e+05\n",
              "25%     209.995000   212.290000   207.095000   210.105000  3.745764e+06\n",
              "50%     232.500000   234.730000   229.900000   232.650000  5.153288e+06\n",
              "75%     270.455000   272.960000   266.605000   270.165000  7.404590e+06\n",
              "max     385.900000   388.110000   376.720000   387.600000  4.840611e+07"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1151df20-59ec-4fd2-99fb-bd1567e1c0ca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1095.000000</td>\n",
              "      <td>1.095000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>243.194283</td>\n",
              "      <td>246.005708</td>\n",
              "      <td>240.125918</td>\n",
              "      <td>243.186831</td>\n",
              "      <td>6.231137e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>44.322538</td>\n",
              "      <td>44.570660</td>\n",
              "      <td>43.903732</td>\n",
              "      <td>44.276109</td>\n",
              "      <td>4.339256e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>170.230000</td>\n",
              "      <td>172.670000</td>\n",
              "      <td>165.900000</td>\n",
              "      <td>169.360000</td>\n",
              "      <td>6.450540e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>209.995000</td>\n",
              "      <td>212.290000</td>\n",
              "      <td>207.095000</td>\n",
              "      <td>210.105000</td>\n",
              "      <td>3.745764e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>232.500000</td>\n",
              "      <td>234.730000</td>\n",
              "      <td>229.900000</td>\n",
              "      <td>232.650000</td>\n",
              "      <td>5.153288e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>270.455000</td>\n",
              "      <td>272.960000</td>\n",
              "      <td>266.605000</td>\n",
              "      <td>270.165000</td>\n",
              "      <td>7.404590e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>385.900000</td>\n",
              "      <td>388.110000</td>\n",
              "      <td>376.720000</td>\n",
              "      <td>387.600000</td>\n",
              "      <td>4.840611e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1151df20-59ec-4fd2-99fb-bd1567e1c0ca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1151df20-59ec-4fd2-99fb-bd1567e1c0ca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1151df20-59ec-4fd2-99fb-bd1567e1c0ca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fff0d669-38fe-4676-a699-530307f94825\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fff0d669-38fe-4676-a699-530307f94825')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fff0d669-38fe-4676-a699-530307f94825 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 337
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "split = 0.85\n",
        "i_split = int(len(df)*split)\n",
        "cols = [\"Close\", \"Volume\"] # коррелирующие данные не стоит добавлять, т.к. получается двойное подтверждение\n",
        "data_train = df.get(cols).values[:i_split]\n",
        "data_test = df.get(cols).values[i_split:]\n",
        "len_train = len(data_train)\n",
        "len_test = len(data_test)\n",
        "print(len(df), len_train, len_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhNSXkpH_iLh",
        "outputId": "4cca7d17-3095-44af-edee-92820027d51b"
      },
      "execution_count": 338,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1095 930 165\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_train, len_train, data_test, len_test # отладочная информация, просто проверить данные вручную"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JkYsHEXJDO45",
        "outputId": "8567bbc8-ca6b-4d35-bc90-044f6d5638ca"
      },
      "execution_count": 339,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[1.932100e+02, 1.781678e+06],\n",
              "        [1.958300e+02, 5.793777e+06],\n",
              "        [1.955100e+02, 3.491602e+06],\n",
              "        ...,\n",
              "        [3.125100e+02, 2.970489e+06],\n",
              "        [3.116100e+02, 3.822496e+06],\n",
              "        [3.139000e+02, 4.416454e+06]]),\n",
              " 930,\n",
              " array([[3.0930000e+02, 6.2327060e+06],\n",
              "        [3.1040000e+02, 3.6086020e+06],\n",
              "        [3.0973000e+02, 2.3511320e+06],\n",
              "        [3.0979000e+02, 2.4810790e+06],\n",
              "        [3.1000000e+02, 1.9708450e+06],\n",
              "        [3.1181000e+02, 2.2588790e+06],\n",
              "        [3.0948000e+02, 1.9409430e+06],\n",
              "        [3.0610000e+02, 3.3868700e+06],\n",
              "        [3.0645000e+02, 3.1492940e+06],\n",
              "        [3.0578000e+02, 1.9958090e+06],\n",
              "        [3.0739000e+02, 2.8893920e+06],\n",
              "        [3.0700000e+02, 1.6481560e+06],\n",
              "        [3.0334000e+02, 3.2667720e+06],\n",
              "        [3.0406000e+02, 2.2612920e+06],\n",
              "        [3.0263000e+02, 3.0696840e+06],\n",
              "        [3.0356000e+02, 2.0523480e+06],\n",
              "        [3.0623000e+02, 2.5280830e+06],\n",
              "        [3.0300000e+02, 2.1233230e+06],\n",
              "        [3.0150000e+02, 2.3920780e+06],\n",
              "        [3.0172000e+02, 2.1082200e+06],\n",
              "        [2.9885000e+02, 3.4532240e+06],\n",
              "        [2.9146000e+02, 4.1244150e+06],\n",
              "        [2.9610000e+02, 3.5564960e+06],\n",
              "        [2.9486000e+02, 1.7526680e+06],\n",
              "        [2.9727000e+02, 2.0319290e+06],\n",
              "        [2.9638000e+02, 1.4959920e+06],\n",
              "        [3.0334000e+02, 3.3887060e+06],\n",
              "        [2.9971000e+02, 3.8559430e+06],\n",
              "        [3.0290000e+02, 2.6896580e+06],\n",
              "        [3.0312000e+02, 2.7950010e+06],\n",
              "        [3.0559000e+02, 4.9522680e+06],\n",
              "        [3.0651000e+02, 3.1506510e+06],\n",
              "        [3.0989000e+02, 3.3788860e+06],\n",
              "        [3.1110000e+02, 3.0666580e+06],\n",
              "        [3.1582000e+02, 3.7290300e+06],\n",
              "        [3.1915000e+02, 5.4096400e+06],\n",
              "        [3.2691000e+02, 7.1958140e+06],\n",
              "        [3.3011000e+02, 4.1507840e+06],\n",
              "        [3.2990000e+02, 3.4418000e+06],\n",
              "        [3.2857000e+02, 2.0985080e+06],\n",
              "        [3.2868000e+02, 1.8758270e+06],\n",
              "        [3.2936000e+02, 2.3916510e+06],\n",
              "        [3.3450000e+02, 4.2463620e+06],\n",
              "        [3.3490000e+02, 3.6270350e+06],\n",
              "        [3.3269000e+02, 4.5936410e+06],\n",
              "        [3.2567000e+02, 3.6358580e+06],\n",
              "        [3.2922000e+02, 2.0584670e+06],\n",
              "        [3.2483000e+02, 3.5662860e+06],\n",
              "        [3.2457000e+02, 2.8098960e+06],\n",
              "        [3.2254000e+02, 2.9404310e+06],\n",
              "        [3.2741000e+02, 2.7875240e+06],\n",
              "        [3.2828000e+02, 2.0366300e+06],\n",
              "        [3.2794000e+02, 3.2466620e+06],\n",
              "        [3.3457000e+02, 3.0689260e+06],\n",
              "        [3.2900000e+02, 3.1557640e+06],\n",
              "        [3.2971000e+02, 2.9610670e+06],\n",
              "        [3.2937000e+02, 1.7484870e+06],\n",
              "        [3.2596000e+02, 2.4463960e+06],\n",
              "        [3.3170000e+02, 4.7863530e+06],\n",
              "        [3.2601000e+02, 2.9891820e+06],\n",
              "        [3.2625000e+02, 1.7427700e+06],\n",
              "        [3.2741000e+02, 2.4368160e+06],\n",
              "        [3.2648000e+02, 2.2503730e+06],\n",
              "        [3.3351000e+02, 4.3839450e+06],\n",
              "        [3.2699000e+02, 6.2479590e+06],\n",
              "        [3.2956000e+02, 5.4127200e+06],\n",
              "        [3.2692000e+02, 3.2111750e+06],\n",
              "        [3.2325000e+02, 4.8989900e+06],\n",
              "        [3.2780000e+02, 3.8092830e+06],\n",
              "        [3.2702000e+02, 2.7550810e+06],\n",
              "        [3.2544000e+02, 2.4603680e+06],\n",
              "        [3.3168000e+02, 3.4380790e+06],\n",
              "        [3.2930000e+02, 5.2526260e+06],\n",
              "        [3.2843000e+02, 2.7623960e+06],\n",
              "        [3.4099000e+02, 8.3456110e+06],\n",
              "        [3.3848000e+02, 3.7620170e+06],\n",
              "        [3.4585000e+02, 6.0753740e+06],\n",
              "        [3.6320000e+02, 8.6813850e+06],\n",
              "        [3.6428000e+02, 9.5590810e+06],\n",
              "        [3.6893000e+02, 4.9526260e+06],\n",
              "        [3.7301000e+02, 3.1015850e+06],\n",
              "        [3.8760000e+02, 6.6939520e+06],\n",
              "        [3.7779000e+02, 5.1421960e+06],\n",
              "        [3.7880000e+02, 5.4674590e+06],\n",
              "        [3.7609000e+02, 3.6297720e+06],\n",
              "        [3.7182000e+02, 3.7299610e+06],\n",
              "        [3.6460000e+02, 3.8131280e+06],\n",
              "        [3.7318000e+02, 4.0014100e+06],\n",
              "        [3.7016000e+02, 2.7520560e+06],\n",
              "        [3.6460000e+02, 2.4509930e+06],\n",
              "        [3.6437000e+02, 2.6333560e+06],\n",
              "        [3.6999000e+02, 3.5641730e+06],\n",
              "        [3.7216000e+02, 4.1753420e+06],\n",
              "        [3.7136000e+02, 3.6322230e+06],\n",
              "        [3.6536000e+02, 5.3831860e+06],\n",
              "        [3.5614000e+02, 5.3480230e+06],\n",
              "        [3.7096000e+02, 5.5126260e+06],\n",
              "        [3.7070000e+02, 3.7715790e+06],\n",
              "        [3.7013000e+02, 3.0859550e+06],\n",
              "        [3.6021000e+02, 3.9019490e+06],\n",
              "        [3.5839000e+02, 3.9674430e+06],\n",
              "        [3.5744000e+02, 4.1693520e+06],\n",
              "        [3.4865000e+02, 4.6528880e+06],\n",
              "        [3.5624000e+02, 4.2866310e+06],\n",
              "        [3.4759000e+02, 1.0070476e+07],\n",
              "        [3.4439000e+02, 5.9812330e+06],\n",
              "        [3.3791000e+02, 6.1961410e+06],\n",
              "        [3.3989000e+02, 4.9468730e+06],\n",
              "        [3.3693000e+02, 4.7109020e+06],\n",
              "        [3.2756000e+02, 6.6920640e+06],\n",
              "        [3.0915000e+02, 1.4400629e+07],\n",
              "        [3.2684000e+02, 1.4482075e+07],\n",
              "        [3.2122000e+02, 7.7871300e+06],\n",
              "        [3.1729000e+02, 4.4050430e+06],\n",
              "        [3.0442000e+02, 9.0384610e+06],\n",
              "        [3.1657000e+02, 8.2196350e+06],\n",
              "        [3.1500000e+02, 9.8246810e+06],\n",
              "        [3.2440000e+02, 6.9783640e+06],\n",
              "        [3.2680000e+02, 6.1409640e+06],\n",
              "        [3.2066000e+02, 4.3078530e+06],\n",
              "        [3.0750000e+02, 9.9680710e+06],\n",
              "        [3.0979000e+02, 1.5414909e+07],\n",
              "        [2.9695000e+02, 2.4103057e+07],\n",
              "        [3.0040000e+02, 1.3391986e+07],\n",
              "        [2.9744000e+02, 8.2036480e+06],\n",
              "        [2.8064000e+02, 1.4631293e+07],\n",
              "        [2.8490000e+02, 1.8527850e+07],\n",
              "        [2.8665000e+02, 8.7523500e+06],\n",
              "        [2.9589000e+02, 1.3470559e+07],\n",
              "        [2.9490000e+02, 1.0979608e+07],\n",
              "        [2.8840000e+02, 7.9696720e+06],\n",
              "        [2.9170000e+02, 6.4957570e+06],\n",
              "        [2.9400000e+02, 6.5509930e+06],\n",
              "        [2.9280000e+02, 5.5542710e+06],\n",
              "        [2.9389000e+02, 3.7675550e+06],\n",
              "        [2.9568000e+02, 3.6175280e+06],\n",
              "        [2.9500000e+02, 3.7849850e+06],\n",
              "        [2.9351000e+02, 3.7676200e+06],\n",
              "        [2.9349000e+02, 4.2567960e+06],\n",
              "        [3.0547000e+02, 5.0183500e+06],\n",
              "        [3.0424000e+02, 5.3270420e+06],\n",
              "        [2.8701000e+02, 7.0017630e+06],\n",
              "        [2.9392000e+02, 7.9382440e+06],\n",
              "        [2.9169000e+02, 6.7428670e+06],\n",
              "        [2.9188000e+02, 5.8921530e+06],\n",
              "        [2.9040000e+02, 8.1822570e+06],\n",
              "        [2.7250000e+02, 2.1155619e+07],\n",
              "        [2.6100000e+02, 4.0632869e+07],\n",
              "        [2.5778000e+02, 2.4868925e+07],\n",
              "        [2.3470000e+02, 4.8406108e+07],\n",
              "        [2.4486000e+02, 3.6095899e+07],\n",
              "        [2.5461000e+02, 3.2911510e+07],\n",
              "        [2.4690000e+02, 2.9569067e+07],\n",
              "        [2.3697000e+02, 3.2582995e+07],\n",
              "        [2.3959000e+02, 2.3259697e+07],\n",
              "        [2.3690000e+02, 2.2488086e+07],\n",
              "        [2.5429000e+02, 3.0130665e+07],\n",
              "        [2.5782000e+02, 2.0418032e+07],\n",
              "        [2.6942000e+02, 1.5619224e+07],\n",
              "        [2.6470000e+02, 1.7039614e+07],\n",
              "        [2.6100000e+02, 1.7021508e+07],\n",
              "        [2.5079000e+02, 1.5116578e+07],\n",
              "        [2.5653000e+02, 1.2703518e+07],\n",
              "        [2.5761000e+02, 8.5588210e+06],\n",
              "        [2.6980000e+02, 1.6152695e+07]]),\n",
              " 165)"
            ]
          },
          "metadata": {},
          "execution_count": 339
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# формы наших данных\n",
        "# по цифре 2 видим, что есть объемы и цена закрытия\n",
        "data_train.shape, data_test.shape\n",
        "# если вставить 3 столбец, то вторая цифра изменится с 2 на 3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B13gEG_CQu0S",
        "outputId": "15f17212-cb18-4262-8883-54d8b4506f5c"
      },
      "execution_count": 340,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((930, 2), (165, 2))"
            ]
          },
          "metadata": {},
          "execution_count": 340
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# определяем параметры нашей сети\n",
        "# sequence_length - сколько мы будем подавать элементов\n",
        "# длина последовательности = 49 + 1, потому что 50-е прзначение как раз будем пытаться предсказать,\n",
        "# поэтому размерность входных данных = 2,\n",
        "sequence_length = 50; input_dim = 2; batch_size = 32; epochs = 5 # изменил кол-во эпох на 5 с 2 в 3-ем видео"
      ],
      "metadata": {
        "id": "nOZxpTVERwFO"
      },
      "execution_count": 341,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model = tf.keras.Sequential([\n",
        "#     tf.keras.layers.LSTM(100, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=True),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=False),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.Dense(1, activation='linear')\n",
        "# ])"
      ],
      "metadata": {
        "id": "fNu8ZjEWdFuv"
      },
      "execution_count": 342,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#model = tf.keras.Sequential([\n",
        "    #tf.keras.layers.LSTM(50, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "    #tf.keras.layers.Dropout(.2),\n",
        "    #tf.keras.layers.LSTM(50, return_sequences=False),\n",
        "    #tf.keras.layers.Dropout(.2),\n",
        "    #tf.keras.layers.Dense(1, activation='linear')\n",
        "#])"
      ],
      "metadata": {
        "id": "Q0y3HHN9flb_"
      },
      "execution_count": 343,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model.summary()"
      ],
      "metadata": {
        "id": "ebjnLO7uf3N0"
      },
      "execution_count": 344,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# tf.keras.utils.plot_model(model, \"multi_input_and_output_model.png\", show_shapes=True)"
      ],
      "metadata": {
        "id": "0tTMP71ugr_A"
      },
      "execution_count": 345,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # 32:50 - вводятся необходимые метрики, которые помогают отслеживать точность предсказаний, можно без метрик.\n",
        "# # Но лучше с ними, т.к. можно заканчивать обучение сети, когда метрика дотигает какой-то величины. Этот момент нужно изучать отдельно, и использовать под свою задачу.\n",
        "# model.compile(optimizer='adam',\n",
        "#               loss=tf.keras.losses.MeanSquaredError(),\n",
        "#               metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "gtZYzojghqi-"
      },
      "execution_count": 346,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model.compile(optimizer='adam',\n",
        "#               loss='mse')"
      ],
      "metadata": {
        "id": "jaIU7HUdjnL6"
      },
      "execution_count": 347,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model.compile(optimizer='adam',\n",
        "#               loss='mse',\n",
        "#               metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "XsUoITn1j2E9"
      },
      "execution_count": 348,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Эту нормализацию поменяна во 2 видео\n",
        "# В видео по нормализации у него несколько методов\n",
        "# 2 - 55:00 - Я так понял, что выполняется последний блок нормализации, если их несколько\n",
        "def normalise_windows(window_data, single_window=False):\n",
        "  '''Normalise window with a base value of zero'''\n",
        "  normalised_data = []\n",
        "  window_data = [window_data] if single_window else window_data\n",
        "  for window in window_data:\n",
        "    normalised_window = []\n",
        "    for col_i in range(window.shape[1]):\n",
        "      max_in_column = max(window[:, col_i])\n",
        "      min_in_column = min(window[:, col_i])\n",
        "      normalised_col = [((float(p) - float(min_in_column)) / (float(max_in_column) - float(min_in_column))) for p in window[:, col_i]]\n",
        "      normalised_window.append(normalised_col)\n",
        "    normalised_window = np.array(normalised_window).T # reshape and transpose array back into original multidimensional format\n",
        "    normalised_data.append(normalised_window)\n",
        "  return np.array(normalised_data)"
      ],
      "metadata": {
        "id": "bHOLeuYMkIKX"
      },
      "execution_count": 349,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _next_window(i, seq_len, normalise):\n",
        "  '''Generates the next dara window fron the given index location i'''\n",
        "  window = data_train[i:i+seq_len]\n",
        "  window = normalise_windows(window, single_window=True)[0] if normalise else window\n",
        "  x = window[:-1]\n",
        "  y = window[-1, [0]]\n",
        "  return x, y"
      ],
      "metadata": {
        "id": "kKL9z0J_HH5Y"
      },
      "execution_count": 350,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# функция тренировочных данных\n",
        "def get_train_data(seq_len, normalise):\n",
        "        '''\n",
        "        Create x, y train data windows\n",
        "        Warning: batch method, not generative, make sure you have enough memory to\n",
        "        load data, otherwise use generate_training_window() method.\n",
        "        '''\n",
        "        data_x = []\n",
        "        data_y = []\n",
        "        for i in range(len_train - seq_len + 1):\n",
        "            x, y = _next_window(i, seq_len, normalise)\n",
        "            data_x.append(x)\n",
        "            data_y.append(y)\n",
        "        return np.array(data_x), np.array(data_y)"
      ],
      "metadata": {
        "id": "nX7Mnbl0KIWy"
      },
      "execution_count": 351,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# загружаем их в эти 2 переменные x_train, y_train\n",
        "x_train, y_train = get_train_data(\n",
        "    seq_len=sequence_length,\n",
        "    normalise=True\n",
        "    # Если False, то нормализация не будет применяться\n",
        ")"
      ],
      "metadata": {
        "id": "CF1PwXHzL4hS"
      },
      "execution_count": 352,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# выводим на экран их формы, чтобы посмотреть\n",
        "# почему-то значение 49 на выходе, показало ему что у нас вывод уже с батчами\n",
        "print(x_train.shape, y_train.shape[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bHKW8xbZN_S7",
        "outputId": "ee600492-6e8f-4629-e25a-32eb33d97a32"
      },
      "execution_count": 353,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(881, 49, 2) 881\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# это просто отладочная информация вывода этого массива, чтьобы посмотреть, что всё ОК\n",
        "for i in range(x_train.shape[0]):\n",
        "  print(x_train[i])\n",
        "  break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "olTDSDhDZAz0",
        "outputId": "6cadc836-824d-47e2-8689-d29bfe7c03e8"
      },
      "execution_count": 354,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.0300308  0.        ]\n",
            " [0.09727926 0.31927388]\n",
            " [0.08906571 0.13607193]\n",
            " [0.11396304 0.09949759]\n",
            " [0.14527721 0.07222995]\n",
            " [0.13244353 0.06673304]\n",
            " [0.08393224 0.20461202]\n",
            " [0.00410678 0.17892655]\n",
            " [0.02387064 0.08692749]\n",
            " [0.00770021 0.07247219]\n",
            " [0.01180698 0.08295354]\n",
            " [0.         0.1148031 ]\n",
            " [0.01822382 0.06201257]\n",
            " [0.10292608 0.2299355 ]\n",
            " [0.07597536 0.11214497]\n",
            " [0.04517454 0.06192607]\n",
            " [0.05159138 0.1783212 ]\n",
            " [0.04645791 0.12636846]\n",
            " [0.04517454 0.10166664]\n",
            " [0.35728953 0.9323959 ]\n",
            " [0.43762834 0.56044011]\n",
            " [0.71894251 0.78619587]\n",
            " [0.65862423 1.        ]\n",
            " [0.63064682 0.26339063]\n",
            " [0.75359343 0.22319646]\n",
            " [0.87037988 0.43235961]\n",
            " [0.91016427 0.54111895]\n",
            " [0.86267967 0.15993237]\n",
            " [0.83572895 0.00802566]\n",
            " [1.         0.47515049]\n",
            " [0.98074949 0.2235018 ]\n",
            " [0.86036961 0.18555339]\n",
            " [0.92299795 0.21031115]\n",
            " [0.89117043 0.04900638]\n",
            " [0.97433265 0.17649696]\n",
            " [0.92813142 0.13138433]\n",
            " [0.82931211 0.22511333]\n",
            " [0.75616016 0.17608793]\n",
            " [0.83572895 0.2166858 ]\n",
            " [0.81801848 0.07996237]\n",
            " [0.8139117  0.04203592]\n",
            " [0.71278234 0.16224848]\n",
            " [0.74050308 0.08348488]\n",
            " [0.91504107 0.13285922]\n",
            " [0.92043121 0.1731617 ]\n",
            " [0.76386037 0.34812496]\n",
            " [0.97176591 0.30060326]\n",
            " [0.88526694 0.19621219]\n",
            " [0.90759754 0.05329538]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prices = x_train[0][:,0] # взять данные по колонке 0\n",
        "prices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bTUsSvfRa3BV",
        "outputId": "430db615-7681-4a77-f118-0ab11fe21d85"
      },
      "execution_count": 355,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.0300308 , 0.09727926, 0.08906571, 0.11396304, 0.14527721,\n",
              "       0.13244353, 0.08393224, 0.00410678, 0.02387064, 0.00770021,\n",
              "       0.01180698, 0.        , 0.01822382, 0.10292608, 0.07597536,\n",
              "       0.04517454, 0.05159138, 0.04645791, 0.04517454, 0.35728953,\n",
              "       0.43762834, 0.71894251, 0.65862423, 0.63064682, 0.75359343,\n",
              "       0.87037988, 0.91016427, 0.86267967, 0.83572895, 1.        ,\n",
              "       0.98074949, 0.86036961, 0.92299795, 0.89117043, 0.97433265,\n",
              "       0.92813142, 0.82931211, 0.75616016, 0.83572895, 0.81801848,\n",
              "       0.8139117 , 0.71278234, 0.74050308, 0.91504107, 0.92043121,\n",
              "       0.76386037, 0.97176591, 0.88526694, 0.90759754])"
            ]
          },
          "metadata": {},
          "execution_count": 355
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max(prices), min(prices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dd0LrgXubyxE",
        "outputId": "19e51a8e-5e33-4d68-efeb-93cfc630f870"
      },
      "execution_count": 356,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1.0, 0.0)"
            ]
          },
          "metadata": {},
          "execution_count": 356
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "volumes = x_train[0][:,1] # взять данные по колонке 1\n",
        "volumes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bjp5tg6LdGI0",
        "outputId": "6038b383-8ced-461a-fb5d-9aa8532c0514"
      },
      "execution_count": 357,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.31927388, 0.13607193, 0.09949759, 0.07222995,\n",
              "       0.06673304, 0.20461202, 0.17892655, 0.08692749, 0.07247219,\n",
              "       0.08295354, 0.1148031 , 0.06201257, 0.2299355 , 0.11214497,\n",
              "       0.06192607, 0.1783212 , 0.12636846, 0.10166664, 0.9323959 ,\n",
              "       0.56044011, 0.78619587, 1.        , 0.26339063, 0.22319646,\n",
              "       0.43235961, 0.54111895, 0.15993237, 0.00802566, 0.47515049,\n",
              "       0.2235018 , 0.18555339, 0.21031115, 0.04900638, 0.17649696,\n",
              "       0.13138433, 0.22511333, 0.17608793, 0.2166858 , 0.07996237,\n",
              "       0.04203592, 0.16224848, 0.08348488, 0.13285922, 0.1731617 ,\n",
              "       0.34812496, 0.30060326, 0.19621219, 0.05329538])"
            ]
          },
          "metadata": {},
          "execution_count": 357
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max(volumes), min(volumes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7pW3Ia-WdVqj",
        "outputId": "7b9e5944-cd3d-4789-b61c-7a9e24d75612"
      },
      "execution_count": 358,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1.0, 0.0)"
            ]
          },
          "metadata": {},
          "execution_count": 358
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train, y_train, x_train.shape, y_train.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YpE848_bdr6k",
        "outputId": "fad7247a-d258-4107-fda0-bb18fa8c593d"
      },
      "execution_count": 359,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[0.0300308  0.        ]\n",
            "  [0.09727926 0.31927388]\n",
            "  [0.08906571 0.13607193]\n",
            "  ...\n",
            "  [0.97176591 0.30060326]\n",
            "  [0.88526694 0.19621219]\n",
            "  [0.90759754 0.05329538]]\n",
            "\n",
            " [[0.09727926 0.3137664 ]\n",
            "  [0.08906571 0.12908225]\n",
            "  [0.11396304 0.092212  ]\n",
            "  ...\n",
            "  [0.88526694 0.18970908]\n",
            "  [0.90759754 0.04563598]\n",
            "  [0.82289528 0.12954593]]\n",
            "\n",
            " [[0.08906571 0.12908225]\n",
            "  [0.11396304 0.092212  ]\n",
            "  [0.14527721 0.06472375]\n",
            "  ...\n",
            "  [0.90759754 0.04563598]\n",
            "  [0.82289528 0.12954593]\n",
            "  [0.87166324 0.12291272]]\n",
            "\n",
            " ...\n",
            "\n",
            " [[0.01099182 0.84715273]\n",
            "  [0.0743865  0.79519322]\n",
            "  [0.07208589 0.44584914]\n",
            "  ...\n",
            "  [0.85761759 0.11122511]\n",
            "  [0.81620654 0.        ]\n",
            "  [0.8448364  0.05474544]]\n",
            "\n",
            " [[0.0743865  0.79519322]\n",
            "  [0.07208589 0.44584914]\n",
            "  [0.         0.27604779]\n",
            "  ...\n",
            "  [0.81620654 0.        ]\n",
            "  [0.8448364  0.05474544]\n",
            "  [0.80368098 0.11889766]]\n",
            "\n",
            " [[0.07208589 0.44584914]\n",
            "  [0.         0.27604779]\n",
            "  [0.01738241 0.53513404]\n",
            "  ...\n",
            "  [0.8448364  0.05474544]\n",
            "  [0.80368098 0.11889766]\n",
            "  [0.78067485 0.24872513]]] [[0.82289528]\n",
            " [0.87166324]\n",
            " [0.8100616 ]\n",
            " [0.75462012]\n",
            " [0.8023614 ]\n",
            " [0.80929158]\n",
            " [0.89681725]\n",
            " [0.82546201]\n",
            " [0.85112936]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.99572284]\n",
            " [1.        ]\n",
            " [0.94334764]\n",
            " [0.96995708]\n",
            " [0.94313305]\n",
            " [0.9667382 ]\n",
            " [0.98369099]\n",
            " [0.98755365]\n",
            " [1.        ]\n",
            " [0.9162318 ]\n",
            " [0.94773278]\n",
            " [0.96192454]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.88193318]\n",
            " [0.99481025]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.97091072]\n",
            " [0.83933766]\n",
            " [0.80174536]\n",
            " [0.87558738]\n",
            " [0.84515552]\n",
            " [0.74692325]\n",
            " [0.67800403]\n",
            " [0.7885433 ]\n",
            " [0.8612665 ]\n",
            " [0.94473036]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.99703264]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.97039474]\n",
            " [1.        ]\n",
            " [0.96992995]\n",
            " [0.87066462]\n",
            " [0.91508628]\n",
            " [0.88091577]\n",
            " [0.94925679]\n",
            " [0.89851358]\n",
            " [0.89800103]\n",
            " [0.90524087]\n",
            " [0.89946809]\n",
            " [0.89205666]\n",
            " [0.68674915]\n",
            " [0.53514698]\n",
            " [0.50447264]\n",
            " [0.40857414]\n",
            " [0.45949787]\n",
            " [0.73732828]\n",
            " [0.65727144]\n",
            " [0.57437234]\n",
            " [0.40857414]\n",
            " [0.46571012]\n",
            " [0.29407389]\n",
            " [0.32577833]\n",
            " [0.29637527]\n",
            " [0.20095949]\n",
            " [0.21150639]\n",
            " [0.31740231]\n",
            " [0.45495905]\n",
            " [0.29602669]\n",
            " [0.        ]\n",
            " [0.03703151]\n",
            " [0.        ]\n",
            " [0.0584966 ]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.17563417]\n",
            " [0.27084518]\n",
            " [0.24331703]\n",
            " [0.26504379]\n",
            " [0.35479468]\n",
            " [0.35195086]\n",
            " [0.32294392]\n",
            " [0.32578774]\n",
            " [0.36230235]\n",
            " [0.37242635]\n",
            " [0.39733819]\n",
            " [0.42042999]\n",
            " [0.40916847]\n",
            " [0.41508361]\n",
            " [0.42998521]\n",
            " [0.40208938]\n",
            " [0.4902284 ]\n",
            " [0.51400989]\n",
            " [0.53849776]\n",
            " [0.46303273]\n",
            " [0.45723286]\n",
            " [0.41180034]\n",
            " [0.36515629]\n",
            " [0.41524805]\n",
            " [0.40957382]\n",
            " [0.37672481]\n",
            " [0.38987243]\n",
            " [0.36370737]\n",
            " [0.37542307]\n",
            " [0.35068992]\n",
            " [0.37685499]\n",
            " [0.4125817 ]\n",
            " [0.39948527]\n",
            " [0.39948527]\n",
            " [0.33600229]\n",
            " [0.36945954]\n",
            " [0.34815556]\n",
            " [0.27008865]\n",
            " [0.2936803 ]\n",
            " [0.26150987]\n",
            " [0.32799542]\n",
            " [0.31369745]\n",
            " [0.26738794]\n",
            " [0.31132488]\n",
            " [0.30476607]\n",
            " [0.44031482]\n",
            " [0.40096196]\n",
            " [0.48906865]\n",
            " [0.22846524]\n",
            " [0.        ]\n",
            " [0.21219319]\n",
            " [0.22670889]\n",
            " [0.47743468]\n",
            " [0.55687516]\n",
            " [0.48931116]\n",
            " [0.46951702]\n",
            " [0.65003959]\n",
            " [0.70731064]\n",
            " [0.79414093]\n",
            " [0.80205859]\n",
            " [0.73000792]\n",
            " [0.7044075 ]\n",
            " [0.79018211]\n",
            " [0.74109264]\n",
            " [0.59619952]\n",
            " [0.43204012]\n",
            " [0.20031671]\n",
            " [0.11691739]\n",
            " [0.27033037]\n",
            " [0.51135242]\n",
            " [0.45376769]\n",
            " [0.33201711]\n",
            " [0.29582099]\n",
            " [0.37578151]\n",
            " [0.49193814]\n",
            " [0.35176045]\n",
            " [0.2201382 ]\n",
            " [0.07568279]\n",
            " [0.13129319]\n",
            " [0.06186245]\n",
            " [0.        ]\n",
            " [0.07277628]\n",
            " [0.        ]\n",
            " [0.08720272]\n",
            " [0.14971687]\n",
            " [0.0414496 ]\n",
            " [0.12344281]\n",
            " [0.07701019]\n",
            " [0.11438279]\n",
            " [0.12797282]\n",
            " [0.03737259]\n",
            " [0.        ]\n",
            " [0.03256445]\n",
            " [0.08838922]\n",
            " [0.06377205]\n",
            " [0.09284745]\n",
            " [0.        ]\n",
            " [0.07648184]\n",
            " [0.06137667]\n",
            " [0.02868069]\n",
            " [0.00879541]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.07449951]\n",
            " [0.23203151]\n",
            " [0.31752543]\n",
            " [0.30767968]\n",
            " [0.36849066]\n",
            " [0.40568689]\n",
            " [0.36039015]\n",
            " [0.41071124]\n",
            " [0.55306737]\n",
            " [0.55818414]\n",
            " [0.57344326]\n",
            " [0.75374268]\n",
            " [0.73681927]\n",
            " [0.75591235]\n",
            " [0.66241758]\n",
            " [0.63604396]\n",
            " [0.43934066]\n",
            " [0.39208791]\n",
            " [0.49428571]\n",
            " [0.53079534]\n",
            " [0.55128894]\n",
            " [0.45665901]\n",
            " [0.64552239]\n",
            " [0.61882893]\n",
            " [0.76607348]\n",
            " [0.7086682 ]\n",
            " [0.62112514]\n",
            " [0.41446613]\n",
            " [0.32548794]\n",
            " [0.33409874]\n",
            " [0.53530425]\n",
            " [0.49799082]\n",
            " [0.33409874]\n",
            " [0.46584386]\n",
            " [0.44259472]\n",
            " [0.58668197]\n",
            " [0.55424799]\n",
            " [0.66704937]\n",
            " [0.8163031 ]\n",
            " [0.93398393]\n",
            " [0.96239954]\n",
            " [0.75746269]\n",
            " [0.78817451]\n",
            " [0.78071183]\n",
            " [0.8564868 ]\n",
            " [0.88375431]\n",
            " [0.85820896]\n",
            " [0.8217566 ]\n",
            " [0.71326062]\n",
            " [0.77887789]\n",
            " [0.79574468]\n",
            " [0.70638298]\n",
            " [0.33191489]\n",
            " [0.43957447]\n",
            " [0.40425532]\n",
            " [0.64085106]\n",
            " [0.56595745]\n",
            " [0.83404255]\n",
            " [0.7787234 ]\n",
            " [0.65106383]\n",
            " [0.48893617]\n",
            " [0.60893617]\n",
            " [0.47234043]\n",
            " [0.53492564]\n",
            " [0.43938711]\n",
            " [0.38170347]\n",
            " [0.19062641]\n",
            " [0.07210455]\n",
            " [0.26588553]\n",
            " [0.36728256]\n",
            " [0.38756196]\n",
            " [0.27444795]\n",
            " [0.16223524]\n",
            " [0.1171699 ]\n",
            " [0.12167643]\n",
            " [0.19378098]\n",
            " [0.261379  ]\n",
            " [0.25236593]\n",
            " [0.27364093]\n",
            " [0.45637277]\n",
            " [0.46779351]\n",
            " [0.73092736]\n",
            " [0.70179699]\n",
            " [0.70422535]\n",
            " [0.70422535]\n",
            " [0.76250607]\n",
            " [0.92083536]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.95141546]\n",
            " [0.98125478]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.99331104]\n",
            " [0.91638796]\n",
            " [1.        ]\n",
            " [0.98498882]\n",
            " [1.        ]\n",
            " [0.95477528]\n",
            " [0.93258427]\n",
            " [0.99859551]\n",
            " [0.96320225]\n",
            " [0.80646067]\n",
            " [0.79016854]\n",
            " [0.89044944]\n",
            " [1.        ]\n",
            " [0.85869565]\n",
            " [0.6013587 ]\n",
            " [0.69836957]\n",
            " [0.59483696]\n",
            " [0.5375    ]\n",
            " [0.66820652]\n",
            " [0.5736413 ]\n",
            " [0.6236413 ]\n",
            " [0.64021739]\n",
            " [0.63858696]\n",
            " [0.62771739]\n",
            " [0.68435754]\n",
            " [0.64916201]\n",
            " [0.62011173]\n",
            " [0.54804469]\n",
            " [0.60614525]\n",
            " [0.57681564]\n",
            " [0.61204482]\n",
            " [0.58944282]\n",
            " [0.60060976]\n",
            " [0.52926829]\n",
            " [0.51572719]\n",
            " [0.53041622]\n",
            " [0.5908112 ]\n",
            " [0.58389262]\n",
            " [0.62013423]\n",
            " [0.48878924]\n",
            " [0.77130045]\n",
            " [0.9478673 ]\n",
            " [0.71973094]\n",
            " [0.76321974]\n",
            " [0.72502938]\n",
            " [0.91774383]\n",
            " [0.94888367]\n",
            " [0.99706228]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.88413462]\n",
            " [0.89951923]\n",
            " [0.85865385]\n",
            " [0.74903846]\n",
            " [0.77451923]\n",
            " [0.73822115]\n",
            " [0.73365385]\n",
            " [0.80120192]\n",
            " [0.80745192]\n",
            " [0.81538462]\n",
            " [0.61826923]\n",
            " [0.50721154]\n",
            " [0.64230769]\n",
            " [0.55504808]\n",
            " [0.64229637]\n",
            " [0.72620216]\n",
            " [0.73307164]\n",
            " [0.70093229]\n",
            " [0.66437684]\n",
            " [0.59077527]\n",
            " [0.52257115]\n",
            " [0.61236506]\n",
            " [0.63223749]\n",
            " [0.61997056]\n",
            " [0.58285572]\n",
            " [0.55943185]\n",
            " [0.72663843]\n",
            " [0.80513332]\n",
            " [0.64166459]\n",
            " [0.76999751]\n",
            " [0.80862198]\n",
            " [0.72233986]\n",
            " [0.71428571]\n",
            " [0.69622012]\n",
            " [0.7098388 ]\n",
            " [0.8963313 ]\n",
            " [0.74123989]\n",
            " [0.84178499]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.58115016]\n",
            " [0.72343191]\n",
            " [0.65943239]\n",
            " [0.58823529]\n",
            " [0.7211464 ]\n",
            " [0.66692486]\n",
            " [0.81022463]\n",
            " [0.57474826]\n",
            " [0.616189  ]\n",
            " [0.5236251 ]\n",
            " [0.6742835 ]\n",
            " [0.67079783]\n",
            " [0.59527498]\n",
            " [0.76684741]\n",
            " [0.6979086 ]\n",
            " [0.70991479]\n",
            " [0.76065066]\n",
            " [0.76103796]\n",
            " [0.7792409 ]\n",
            " [0.75755229]\n",
            " [0.78853914]\n",
            " [0.68926554]\n",
            " [0.5165456 ]\n",
            " [0.44592413]\n",
            " [0.42493947]\n",
            " [0.42009685]\n",
            " [0.42615012]\n",
            " [0.34826473]\n",
            " [0.24737692]\n",
            " [0.28173913]\n",
            " [0.20217391]\n",
            " [0.3       ]\n",
            " [0.19782609]\n",
            " [0.29565217]\n",
            " [0.34010152]\n",
            " [0.21269036]\n",
            " [0.01015228]\n",
            " [0.        ]\n",
            " [0.05072721]\n",
            " [0.18446258]\n",
            " [0.05108194]\n",
            " [0.11067755]\n",
            " [0.        ]\n",
            " [0.05753618]\n",
            " [0.08859866]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.01336821]\n",
            " [0.08166231]\n",
            " [0.04778041]\n",
            " [0.13656388]\n",
            " [0.16638428]\n",
            " [0.16638428]\n",
            " [0.13249746]\n",
            " [0.1118265 ]\n",
            " [0.12572009]\n",
            " [0.23688721]\n",
            " [0.32944806]\n",
            " [0.41446692]\n",
            " [0.3225917 ]\n",
            " [0.42886527]\n",
            " [0.5553651 ]\n",
            " [0.49468632]\n",
            " [0.49400069]\n",
            " [0.64141241]\n",
            " [0.69009256]\n",
            " [0.68495029]\n",
            " [0.63112787]\n",
            " [0.71066164]\n",
            " [0.73020226]\n",
            " [0.77536503]\n",
            " [0.90905038]\n",
            " [0.81317142]\n",
            " [0.70574498]\n",
            " [0.60298926]\n",
            " [0.63054647]\n",
            " [0.67725362]\n",
            " [0.62867819]\n",
            " [0.61279776]\n",
            " [0.55581504]\n",
            " [0.41616067]\n",
            " [0.44325082]\n",
            " [0.38159738]\n",
            " [0.60532461]\n",
            " [0.5370892 ]\n",
            " [0.61549296]\n",
            " [0.65305164]\n",
            " [0.73802817]\n",
            " [0.64835681]\n",
            " [0.69530516]\n",
            " [0.77042254]\n",
            " [0.88779343]\n",
            " [0.98403756]\n",
            " [0.95539906]\n",
            " [1.        ]\n",
            " [0.99205719]\n",
            " [1.        ]\n",
            " [0.89619119]\n",
            " [0.78528753]\n",
            " [0.892728  ]\n",
            " [0.86862194]\n",
            " [0.68300522]\n",
            " [0.74367216]\n",
            " [0.82924869]\n",
            " [0.84640523]\n",
            " [0.98684211]\n",
            " [0.86963037]\n",
            " [0.93606394]\n",
            " [0.85464535]\n",
            " [0.72177822]\n",
            " [0.73626374]\n",
            " [0.86113886]\n",
            " [0.73376623]\n",
            " [0.82367632]\n",
            " [0.75024975]\n",
            " [0.71878122]\n",
            " [0.76773227]\n",
            " [0.76023976]\n",
            " [0.61138861]\n",
            " [0.57242757]\n",
            " [0.62137862]\n",
            " [0.56043956]\n",
            " [0.54995005]\n",
            " [0.39460539]\n",
            " [0.44105894]\n",
            " [0.44705295]\n",
            " [0.61838162]\n",
            " [0.71328671]\n",
            " [0.75674326]\n",
            " [0.87712288]\n",
            " [0.91358641]\n",
            " [0.92157842]\n",
            " [0.92059701]\n",
            " [0.92955224]\n",
            " [1.        ]\n",
            " [0.87640449]\n",
            " [0.91629213]\n",
            " [1.        ]\n",
            " [0.99329897]\n",
            " [0.95810364]\n",
            " [0.969129  ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.9548069 ]\n",
            " [1.        ]\n",
            " [0.95928396]\n",
            " [0.96630397]\n",
            " [1.        ]\n",
            " [0.89445495]\n",
            " [0.80812854]\n",
            " [0.84593573]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.95935829]\n",
            " [0.8842246 ]\n",
            " [0.93128342]\n",
            " [0.65935829]\n",
            " [0.72299465]\n",
            " [0.7828877 ]\n",
            " [0.71256684]\n",
            " [0.57593583]\n",
            " [0.62379679]\n",
            " [0.66149733]\n",
            " [0.65614973]\n",
            " [0.57352941]\n",
            " [0.63208556]\n",
            " [0.57754011]\n",
            " [0.63743316]\n",
            " [0.63743316]\n",
            " [0.62112299]\n",
            " [0.56390374]\n",
            " [0.54208939]\n",
            " [0.48115543]\n",
            " [0.44228433]\n",
            " [0.42263056]\n",
            " [0.42752902]\n",
            " [0.17555876]\n",
            " [0.36097742]\n",
            " [0.06219739]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.21208323]\n",
            " [0.17798947]\n",
            " [0.10428679]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.24622897]\n",
            " [0.21638633]\n",
            " [0.08790016]\n",
            " [0.        ]\n",
            " [0.16249067]\n",
            " [0.22838256]\n",
            " [0.09702527]\n",
            " [0.1958631 ]\n",
            " [0.14724384]\n",
            " [0.14713722]\n",
            " [0.06514554]\n",
            " [0.09308029]\n",
            " [0.1379678 ]\n",
            " [0.11205885]\n",
            " [0.13742278]\n",
            " [0.12464372]\n",
            " [0.18011401]\n",
            " [0.27267422]\n",
            " [0.30372359]\n",
            " [0.34247695]\n",
            " [0.33381503]\n",
            " [0.29569826]\n",
            " [0.28472821]\n",
            " [0.14544558]\n",
            " [0.17583097]\n",
            " [0.21849682]\n",
            " [0.18758569]\n",
            " [0.14682787]\n",
            " [0.19855416]\n",
            " [0.20777764]\n",
            " [0.1838734 ]\n",
            " [0.18882292]\n",
            " [0.2403684 ]\n",
            " [0.28132758]\n",
            " [0.3002744 ]\n",
            " [0.2537567 ]\n",
            " [0.26760747]\n",
            " [0.28002091]\n",
            " [0.27753822]\n",
            " [0.31700918]\n",
            " [0.27469532]\n",
            " [0.2091084 ]\n",
            " [0.15298268]\n",
            " [0.15704918]\n",
            " [0.25249742]\n",
            " [0.32217848]\n",
            " [0.67177914]\n",
            " [0.61792774]\n",
            " [0.49863667]\n",
            " [0.57021132]\n",
            " [0.6724608 ]\n",
            " [0.82617587]\n",
            " [1.        ]\n",
            " [0.81722177]\n",
            " [0.94557271]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.79571984]\n",
            " [0.94163424]\n",
            " [0.97081712]\n",
            " [0.88909091]\n",
            " [0.76200584]\n",
            " [0.65110109]\n",
            " [0.62377288]\n",
            " [0.63544707]\n",
            " [0.64552932]\n",
            " [0.52958344]\n",
            " [0.61528257]\n",
            " [0.59936323]\n",
            " [0.62324224]\n",
            " [0.61315999]\n",
            " [0.51313346]\n",
            " [0.58344388]\n",
            " [0.51499071]\n",
            " [0.68426638]\n",
            " [0.7200849 ]\n",
            " [0.81719289]\n",
            " [0.70894136]\n",
            " [0.72061555]\n",
            " [0.67126559]\n",
            " [0.75537278]\n",
            " [0.65216238]\n",
            " [0.68161316]\n",
            " [0.72379942]\n",
            " [0.7306978 ]\n",
            " [0.71637039]\n",
            " [0.79808968]\n",
            " [0.84690899]\n",
            " [0.87291059]\n",
            " [0.83841868]\n",
            " [0.85327673]\n",
            " [0.87795171]\n",
            " [0.84143426]\n",
            " [0.92883436]\n",
            " [0.89723926]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.9789823 ]\n",
            " [0.96501809]\n",
            " [1.        ]\n",
            " [0.95182972]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.97426752]\n",
            " [0.93859873]\n",
            " [0.88280255]\n",
            " [0.84458599]\n",
            " [0.92356688]\n",
            " [0.74726115]\n",
            " [0.71515924]\n",
            " [0.73019108]\n",
            " [0.63515924]\n",
            " [0.62802548]\n",
            " [0.58802548]\n",
            " [0.58980892]\n",
            " [0.58471338]\n",
            " [0.62394904]\n",
            " [0.49477707]\n",
            " [0.38649682]\n",
            " [0.4856051 ]\n",
            " [0.46197039]\n",
            " [0.36906585]\n",
            " [0.28256395]\n",
            " [0.35901206]\n",
            " [0.37283152]\n",
            " [0.55807116]\n",
            " [0.67950603]\n",
            " [0.66656866]\n",
            " [0.6783299 ]\n",
            " [0.64422229]\n",
            " [0.50911854]\n",
            " [0.60367205]\n",
            " [0.55998734]\n",
            " [0.54954099]\n",
            " [0.50333216]\n",
            " [0.48981104]\n",
            " [0.37310115]\n",
            " [0.50870693]\n",
            " [0.43542985]\n",
            " [0.        ]\n",
            " [0.00267857]\n",
            " [0.07083333]\n",
            " [0.05357143]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.02160994]\n",
            " [0.        ]\n",
            " [0.07492641]\n",
            " [0.        ]\n",
            " [0.        ]\n",
            " [0.03904924]\n",
            " [0.20300752]\n",
            " [0.22774739]\n",
            " [0.23286965]\n",
            " [0.34867905]\n",
            " [0.25974366]\n",
            " [0.16923882]\n",
            " [0.11370169]\n",
            " [0.1439295 ]\n",
            " [0.        ]\n",
            " [0.11504425]\n",
            " [0.2690921 ]\n",
            " [0.51491314]\n",
            " [0.54113405]\n",
            " [0.88692232]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.95093728]\n",
            " [0.97199722]\n",
            " [1.        ]\n",
            " [0.9512766 ]\n",
            " [0.88765957]\n",
            " [0.83574468]\n",
            " [0.81765957]\n",
            " [0.82361702]\n",
            " [0.98595745]\n",
            " [1.        ]\n",
            " [0.96445405]\n",
            " [0.99371563]\n",
            " [0.95522388]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.98541303]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.95431472]\n",
            " [0.93920715]\n",
            " [0.93497704]\n",
            " [0.93678994]\n",
            " [0.83599226]\n",
            " [0.734832  ]\n",
            " [0.73785352]\n",
            " [0.8352671 ]\n",
            " [0.82583998]\n",
            " [0.84179357]\n",
            " [0.89086294]\n",
            " [0.8582306 ]\n",
            " [0.85400048]\n",
            " [0.8582306 ]\n",
            " [0.89690597]\n",
            " [0.86947063]\n",
            " [0.99891226]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.93022472]\n",
            " [0.93917417]\n",
            " [0.837975  ]\n",
            " [0.86082685]\n",
            " [0.83721893]\n",
            " [0.83548595]\n",
            " [0.710707  ]\n",
            " [0.57010085]\n",
            " [0.51176587]\n",
            " [0.59165513]\n",
            " [0.51572078]\n",
            " [0.52481709]\n",
            " [0.36958671]\n",
            " [0.48210401]\n",
            " [0.46925054]\n",
            " [0.47385166]\n",
            " [0.53398969]\n",
            " [0.54682854]\n",
            " [0.63354807]\n",
            " [0.47943508]\n",
            " [0.4031219 ]\n",
            " [0.20671267]\n",
            " [0.24749059]\n",
            " [0.42973651]\n",
            " [0.40119197]\n",
            " [0.40119197]\n",
            " [0.27854454]\n",
            " [0.41499373]\n",
            " [0.38895859]\n",
            " [0.48933501]\n",
            " [0.4325596 ]\n",
            " [0.39523212]\n",
            " [0.3782936 ]\n",
            " [0.48525721]\n",
            " [0.65840652]\n",
            " [0.62421581]\n",
            " [0.52195734]\n",
            " [0.60821832]\n",
            " [0.86825596]\n",
            " [0.75690088]\n",
            " [0.87484316]\n",
            " [0.8412798 ]\n",
            " [1.        ]\n",
            " [0.98816055]\n",
            " [0.72884782]\n",
            " [0.61045336]\n",
            " [0.79006642]\n",
            " [0.88189431]\n",
            " [0.7071903 ]\n",
            " [0.79930696]\n",
            " [0.82442969]\n",
            " [0.95610742]\n",
            " [1.        ]\n",
            " [0.99857914]\n",
            " [0.93520887]\n",
            " [0.91304348]\n",
            " [0.95453254]\n",
            " [0.87155442]\n",
            " [0.66467747]\n",
            " [0.73515203]\n",
            " [0.73259449]\n",
            " [0.65245808]\n",
            " [0.61691542]\n",
            " [0.8225539 ]\n",
            " [0.79442392]\n",
            " [0.66503497]\n",
            " [0.83216783]\n",
            " [0.8048951 ]\n",
            " [0.79440559]\n",
            " [0.85839161]\n",
            " [0.96083916]\n",
            " [0.9959707 ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.99968264]\n",
            " [0.95556966]\n",
            " [0.97282033]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [1.        ]\n",
            " [0.72044626]\n",
            " [0.60013204]\n",
            " [0.70400528]\n",
            " [0.64590669]\n",
            " [0.61934879]\n",
            " [0.64802149]\n",
            " [0.43356131]\n",
            " [0.42672203]\n",
            " [0.53688324]\n",
            " [0.52393747]\n",
            " [0.672936  ]\n",
            " [0.67806546]\n",
            " [0.81753786]\n",
            " [0.72827198]\n",
            " [0.7597137 ]\n",
            " [0.78041922]\n",
            " [0.84125767]\n",
            " [0.80112474]\n",
            " [0.76354806]\n",
            " [0.88087935]\n",
            " [0.86298569]\n",
            " [0.86170757]\n",
            " [0.85761759]\n",
            " [0.81620654]\n",
            " [0.8448364 ]\n",
            " [0.80368098]\n",
            " [0.78067485]\n",
            " [0.83921268]] (881, 49, 2) (881, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3 - 26:00 - Еще одна функция тренировочного набора, которая создана немножко по-другому,\n",
        "# данные те же самые формируются, но Шпанину она кажется немного удобнее\n",
        "def get_train_data2(seq_len, normalise):\n",
        "        '''\n",
        "        Create x, y test data windows\n",
        "        Warning: batch method, not generative, make sure you have enough memory to\n",
        "        load data, otherwise reduce size of the training split.\n",
        "        '''\n",
        "        data_windows = []\n",
        "        for i in range(len_train - seq_len + 1):\n",
        "            data_windows.append(data_train[i:i+seq_len])\n",
        "\n",
        "        data_windows = np.array(data_windows).astype(float)\n",
        "        data_windows = normalise_windows(data_windows, single_window=False) if normalise else data_windows # False, потому что тренировочный набор\n",
        "\n",
        "        x = data_windows[:, :-1]\n",
        "        y = data_windows[:, -1, [0]]\n",
        "        return x,y"
      ],
      "metadata": {
        "id": "FQFLZvOK8bor"
      },
      "execution_count": 360,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train2, y_train2 = get_train_data2(\n",
        "    seq_len=sequence_length,\n",
        "    normalise=True\n",
        ")"
      ],
      "metadata": {
        "id": "19a90KCA8-Js"
      },
      "execution_count": 361,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"train data shapes: \", x_train.shape, y_train.shape)\n",
        "print(\"train data shapes: \", x_train2.shape, y_train2.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fw8In4r69Mss",
        "outputId": "c3d56bc9-1e62-4172-c56d-b20b0ee6c353"
      },
      "execution_count": 362,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train data shapes:  (881, 49, 2) (881, 1)\n",
            "train data shapes:  (881, 49, 2) (881, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# генерируем тестовый набор данных\n",
        "def get_test_data(seq_len, normalise):\n",
        "        '''\n",
        "        Create x, y test data windows\n",
        "        Warning: batch method, not generative, make sure you have enough memory to\n",
        "        load data, otherwise reduce size of the training split.\n",
        "        '''\n",
        "        data_windows = []\n",
        "        for i in range(len_test - seq_len):\n",
        "            data_windows.append(data_test[i:i+seq_len])\n",
        "\n",
        "        data_windows = np.array(data_windows).astype(float)\n",
        "        data_windows = normalise_windows(data_windows, single_window=False) if normalise else data_windows # False, потому что тренировочный набор\n",
        "\n",
        "        x = data_windows[:, :-1]\n",
        "        y = data_windows[:, -1, [0]]\n",
        "        return x,y"
      ],
      "metadata": {
        "id": "Os-15MgKaMtg"
      },
      "execution_count": 363,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# тестовые данные сохраняем в эти 2 объекта\n",
        "x_test, y_test = get_test_data(\n",
        "    seq_len=sequence_length,\n",
        "    normalise=True\n",
        ")"
      ],
      "metadata": {
        "id": "hc_lwHXdaWIv"
      },
      "execution_count": 364,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"test data shapes: \", x_test.shape, y_test.shape)\n",
        "#print(x_test, y_test, x_test.shape, y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hNUvXVToaaSJ",
        "outputId": "968dfbbd-bf3c-4459-8e72-511b70cda192"
      },
      "execution_count": 365,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test data shapes:  (115, 49, 2) (115, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# out-of memory generative training\n",
        "steps_per_epoch  = math.ceil((len_train - sequence_length) / batch_size)\n",
        "print(steps_per_epoch)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lT9xH8CebXM3",
        "outputId": "8df006e4-ac53-433e-9d86-d8e22c953688"
      },
      "execution_count": 366,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 32"
      ],
      "metadata": {
        "id": "QoXPo7Qmb8lf"
      },
      "execution_count": 367,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3 - 27:30 - эта модель из англоязычного файла, она черновая, тестовая. Возможно Шпагин ее поменяет\n",
        "# 3 - 28:30 - Модель Sequential неэффективна, нужна модель, которая будет иметь несколько разных входов, где параллельные модели будут соединяться,\n",
        "# чтобы учитывать не только цены, но и другие показатели\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.LSTM(100, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "    tf.keras.layers.Dropout(.2),\n",
        "    tf.keras.layers.LSTM(100, return_sequences=True),\n",
        "    tf.keras.layers.LSTM(100, return_sequences=False),\n",
        "    tf.keras.layers.Dropout(.2),\n",
        "    tf.keras.layers.Dense(1, activation='linear')\n",
        "])"
      ],
      "metadata": {
        "id": "_1H0MMfUa1TT"
      },
      "execution_count": 368,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQxZtCnrbCJJ",
        "outputId": "b652f7d2-ca2d-41a4-cb0b-55a41479b17f"
      },
      "execution_count": 369,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_11\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_33 (LSTM)              (None, 49, 100)           41200     \n",
            "                                                                 \n",
            " dropout_22 (Dropout)        (None, 49, 100)           0         \n",
            "                                                                 \n",
            " lstm_34 (LSTM)              (None, 49, 100)           80400     \n",
            "                                                                 \n",
            " lstm_35 (LSTM)              (None, 100)               80400     \n",
            "                                                                 \n",
            " dropout_23 (Dropout)        (None, 100)               0         \n",
            "                                                                 \n",
            " dense_11 (Dense)            (None, 1)                 101       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 202101 (789.46 KB)\n",
            "Trainable params: 202101 (789.46 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam',\n",
        "              loss='mse',\n",
        "              metrics=[tf.keras.metrics.MeanSquaredError()])\n",
        "# большинство статей указывают что оптимизатор adam самый лучший\n",
        "# 3 - 29:30 - adam часто взрывается, кьы prop стабильнее (из комментариев)"
      ],
      "metadata": {
        "id": "4R33caq3bk2a"
      },
      "execution_count": 370,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "callbacks = [\n",
        "    tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n",
        "]\n",
        "# Здесь с помощью log_dir (куда сохраняются логи при обучении нейросети), можно построить график потерь или отображения точности сети"
      ],
      "metadata": {
        "id": "peM8S-4_cNdL"
      },
      "execution_count": 371,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model = tf.keras.Sequential([\n",
        "#     tf.keras.layers.LSTM(100, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=True),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=False),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.Dense(1, activation='linear')\n",
        "# ])\n",
        "# model.compile(optimizer='adam',\n",
        "#               loss='mse',\n",
        "#               metrics=[tf.keras.metrics.MeanSquaredError()])\n",
        "# callbacks = [\n",
        "#     tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n",
        "# ]"
      ],
      "metadata": {
        "id": "IbYSLCVrho3X"
      },
      "execution_count": 372,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # underfit\n",
        "# history = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2, callbacks=callbacks)"
      ],
      "metadata": {
        "id": "he7zJCRHiFeT"
      },
      "execution_count": 373,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plt.plot(history.history['loss'])\n",
        "# plt.plot(history.history['val_loss'])\n",
        "# plt.title('model train vs validation loss')\n",
        "# plt.ylabel('loss')\n",
        "# plt.xlabel('epoch')\n",
        "# plt.legend(['train', 'validation'], loc='upper right')\n",
        "# plt.show()"
      ],
      "metadata": {
        "id": "9rhnP-pHinqt"
      },
      "execution_count": 374,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# та же самая модель. Мы ее заново сбрасываем, потому что она уже обучена.\n",
        "# Если ее не сбросить, то мы будем обучать модель 2-ой раз, и ее веса будут заново перестраиваться\n",
        "# model = tf.keras.Sequential([\n",
        "#     tf.keras.layers.LSTM(100, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=True),\n",
        "#     tf.keras.layers.LSTM(100, return_sequences=False),\n",
        "#     tf.keras.layers.Dropout(.2),\n",
        "#     tf.keras.layers.Dense(1, activation='linear')\n",
        "# ])\n",
        "# model.compile(optimizer='adam',\n",
        "#               loss='mse',\n",
        "#               metrics=[tf.keras.metrics.MeanSquaredError()])\n",
        "# callbacks = [\n",
        "#     tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n",
        "# ]"
      ],
      "metadata": {
        "id": "Ly0bfxzDj7OB"
      },
      "execution_count": 375,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# goodfit\n",
        "# больше кол-во эпох. Это уже гуд, но не когда мы уже выходим по метрикам\n",
        "# history = model.fit(x_train, y_train, epochs=100, batch_size=batch_size, validation_split=0.2, callbacks=callbacks)"
      ],
      "metadata": {
        "id": "rtbkgYCUkJTZ"
      },
      "execution_count": 376,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# получается глаже, но можно еще глаже если поработать с нормализацией и моделью\n",
        "# plt.plot(history.history['loss'])\n",
        "# plt.plot(history.history['val_loss'])\n",
        "# plt.title('model train vs validation loss')\n",
        "# plt.ylabel('loss')\n",
        "# plt.xlabel('epoch')\n",
        "# plt.legend(['train', 'validation'], loc='upper right')\n",
        "# plt.show()"
      ],
      "metadata": {
        "id": "CZBwBokomJXU"
      },
      "execution_count": 377,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Для отслеживания, когда нейросети при обучении нужно остановиться, вставляем EarlyStopping в callback\n",
        "# Будем мониторить 'val_loss'. Если в течение 2 эпох не будет улучшения, то пора остановиться\n",
        "# а для того,чтобы не потерять сеть которую мы обучали, можно сделать ModelCheckpoint\n",
        "# и сохранить ее например в 'best_model.h5'\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.LSTM(100, input_shape=(sequence_length-1, input_dim), return_sequences=True),\n",
        "    tf.keras.layers.Dropout(.2),\n",
        "    tf.keras.layers.LSTM(100, return_sequences=True),\n",
        "    tf.keras.layers.LSTM(100, return_sequences=False),\n",
        "    tf.keras.layers.Dropout(.2),\n",
        "    tf.keras.layers.Dense(1, activation='linear')\n",
        "])\n",
        "model.compile(optimizer='adam',\n",
        "              loss='mse',\n",
        "              metrics=[tf.keras.metrics.MeanSquaredError()])\n",
        "callbacks = [\n",
        "    tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1), EarlyStopping(monitor='val_loss', patience=3)\n",
        "]"
      ],
      "metadata": {
        "id": "3mtVN-qE-kzR"
      },
      "execution_count": 378,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(x_train, y_train, epochs=200, batch_size=batch_size, validation_split=0.2, callbacks=callbacks)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0jfF3O9DKPG",
        "outputId": "11355e94-233e-4471-b6f5-a78afc5590d3"
      },
      "execution_count": 379,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/200\n",
            "22/22 [==============================] - 10s 246ms/step - loss: 0.1078 - mean_squared_error: 0.1078 - val_loss: 0.0784 - val_mean_squared_error: 0.0784\n",
            "Epoch 2/200\n",
            "22/22 [==============================] - 3s 122ms/step - loss: 0.0525 - mean_squared_error: 0.0525 - val_loss: 0.0530 - val_mean_squared_error: 0.0530\n",
            "Epoch 3/200\n",
            "22/22 [==============================] - 3s 128ms/step - loss: 0.0433 - mean_squared_error: 0.0433 - val_loss: 0.0460 - val_mean_squared_error: 0.0460\n",
            "Epoch 4/200\n",
            "22/22 [==============================] - 3s 127ms/step - loss: 0.0380 - mean_squared_error: 0.0380 - val_loss: 0.0417 - val_mean_squared_error: 0.0417\n",
            "Epoch 5/200\n",
            "22/22 [==============================] - 3s 160ms/step - loss: 0.0309 - mean_squared_error: 0.0309 - val_loss: 0.0378 - val_mean_squared_error: 0.0378\n",
            "Epoch 6/200\n",
            "22/22 [==============================] - 3s 129ms/step - loss: 0.0290 - mean_squared_error: 0.0290 - val_loss: 0.0327 - val_mean_squared_error: 0.0327\n",
            "Epoch 7/200\n",
            "22/22 [==============================] - 3s 116ms/step - loss: 0.0284 - mean_squared_error: 0.0284 - val_loss: 0.0338 - val_mean_squared_error: 0.0338\n",
            "Epoch 8/200\n",
            "22/22 [==============================] - 3s 125ms/step - loss: 0.0261 - mean_squared_error: 0.0261 - val_loss: 0.0437 - val_mean_squared_error: 0.0437\n",
            "Epoch 9/200\n",
            "22/22 [==============================] - 3s 126ms/step - loss: 0.0251 - mean_squared_error: 0.0251 - val_loss: 0.0271 - val_mean_squared_error: 0.0271\n",
            "Epoch 10/200\n",
            "22/22 [==============================] - 4s 168ms/step - loss: 0.0244 - mean_squared_error: 0.0244 - val_loss: 0.0272 - val_mean_squared_error: 0.0272\n",
            "Epoch 11/200\n",
            "22/22 [==============================] - 3s 127ms/step - loss: 0.0245 - mean_squared_error: 0.0245 - val_loss: 0.0268 - val_mean_squared_error: 0.0268\n",
            "Epoch 12/200\n",
            "22/22 [==============================] - 2s 111ms/step - loss: 0.0237 - mean_squared_error: 0.0237 - val_loss: 0.0260 - val_mean_squared_error: 0.0260\n",
            "Epoch 13/200\n",
            "22/22 [==============================] - 3s 122ms/step - loss: 0.0227 - mean_squared_error: 0.0227 - val_loss: 0.0265 - val_mean_squared_error: 0.0265\n",
            "Epoch 14/200\n",
            "22/22 [==============================] - 3s 148ms/step - loss: 0.0232 - mean_squared_error: 0.0232 - val_loss: 0.0199 - val_mean_squared_error: 0.0199\n",
            "Epoch 15/200\n",
            "22/22 [==============================] - 3s 134ms/step - loss: 0.0211 - mean_squared_error: 0.0211 - val_loss: 0.0183 - val_mean_squared_error: 0.0183\n",
            "Epoch 16/200\n",
            "22/22 [==============================] - 2s 112ms/step - loss: 0.0196 - mean_squared_error: 0.0196 - val_loss: 0.0181 - val_mean_squared_error: 0.0181\n",
            "Epoch 17/200\n",
            "22/22 [==============================] - 3s 118ms/step - loss: 0.0192 - mean_squared_error: 0.0192 - val_loss: 0.0168 - val_mean_squared_error: 0.0168\n",
            "Epoch 18/200\n",
            "22/22 [==============================] - 3s 122ms/step - loss: 0.0194 - mean_squared_error: 0.0194 - val_loss: 0.0152 - val_mean_squared_error: 0.0152\n",
            "Epoch 19/200\n",
            "22/22 [==============================] - 4s 170ms/step - loss: 0.0188 - mean_squared_error: 0.0188 - val_loss: 0.0152 - val_mean_squared_error: 0.0152\n",
            "Epoch 20/200\n",
            "22/22 [==============================] - 3s 121ms/step - loss: 0.0184 - mean_squared_error: 0.0184 - val_loss: 0.0144 - val_mean_squared_error: 0.0144\n",
            "Epoch 21/200\n",
            "22/22 [==============================] - 3s 116ms/step - loss: 0.0168 - mean_squared_error: 0.0168 - val_loss: 0.0163 - val_mean_squared_error: 0.0163\n",
            "Epoch 22/200\n",
            "22/22 [==============================] - 3s 116ms/step - loss: 0.0176 - mean_squared_error: 0.0176 - val_loss: 0.0178 - val_mean_squared_error: 0.0178\n",
            "Epoch 23/200\n",
            "22/22 [==============================] - 3s 129ms/step - loss: 0.0174 - mean_squared_error: 0.0174 - val_loss: 0.0151 - val_mean_squared_error: 0.0151\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model train vs validation loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'validation'], loc='upper right')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "g9k_E_OTCKA0",
        "outputId": "582a066f-f698-422d-c9ca-5d8c2cf49905"
      },
      "execution_count": 380,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %tensorboard --logdir logs/fit"
      ],
      "metadata": {
        "id": "Iuwxv1C2EXJ3"
      },
      "execution_count": 381,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from keras.callbacks import EarlyStopping\n",
        "# callbacks = [\n",
        "#     EarlyStopping(monitor='val_loss', patience=2)\n",
        "#     ]"
      ],
      "metadata": {
        "id": "8fLzEJeab_Kl"
      },
      "execution_count": 382,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# callbacks = [\n",
        "#     EarlyStopping(monitor='accuracy', patience=2)\n",
        "# ]"
      ],
      "metadata": {
        "id": "Y44ilw9log8H"
      },
      "execution_count": 383,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model.fit(x,y, epochs=epochs, batch_size=batch_size, callbacks=callbacks)\n",
        "# # ЕСТЬ ВИДЕО НА КАНАЛЕ КАК КОНЕКТИТЬСЯ К МЕТАТРЕЙДЕРУ, ТАК ЖЕ МОЖНО И К КВИКУ"
      ],
      "metadata": {
        "id": "JNjrVs-Zt6SK"
      },
      "execution_count": 384,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model.fit(x,y, epochs=epochs)\n",
        "# он закомментил, потому что то же самое, что и перед этим"
      ],
      "metadata": {
        "id": "3IkgOjSk7KzB"
      },
      "execution_count": 385,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# генерируем тестовый набор даных\n",
        "def get_test_data(seq_len, normalise):\n",
        "        '''\n",
        "        Create x, y test data windows\n",
        "        Warning: batch method, not generative, make sure you have enough memory to\n",
        "        load data, otherwise reduce size of the training split.\n",
        "        '''\n",
        "        data_windows = []\n",
        "        for i in range(len_test - seq_len):\n",
        "            data_windows.append(data_test[i:i+seq_len])\n",
        "\n",
        "        data_windows = np.array(data_windows).astype(float)\n",
        "        data_windows = normalise_windows(data_windows, single_window=False) if normalise else data_windows # False, потому что тренировочный набор\n",
        "\n",
        "        x = data_windows[:, :-1]\n",
        "        y = data_windows[:, -1, [0]]\n",
        "        return x,y"
      ],
      "metadata": {
        "id": "2YV2WzV8unEJ"
      },
      "execution_count": 386,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, y_test = get_test_data(\n",
        "    seq_len=sequence_length,\n",
        "    normalise=True\n",
        ")"
      ],
      "metadata": {
        "id": "fNcrwSU_3gWy"
      },
      "execution_count": 387,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"test data shapes: \", x_test.shape, y_test.shape)\n",
        "#print(x_test, y_test, x_test.shape, y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vgrKXfnP4U-q",
        "outputId": "7f235f04-b6a1-4c5e-9b91-4b9d1e83c16c"
      },
      "execution_count": 388,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test data shapes:  (115, 49, 2) (115, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(x_test, y_test, verbose=2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nDVXKwdA5hqi",
        "outputId": "f7c63952-9557-4234-fc05-f23e6d923ac1"
      },
      "execution_count": 389,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 - 0s - loss: 0.0140 - mean_squared_error: 0.0140 - 205ms/epoch - 51ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.014022856950759888, 0.014022856950759888]"
            ]
          },
          "metadata": {},
          "execution_count": 389
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_last_data(seq_len, normalise):\n",
        "  # 2 - 32:00 - это последние данные из загруженного нами csv файла. Правда по его мнению это не совсем верно брать такой data_test\n",
        "  last_data = data_test[seq_len:]\n",
        "  data_windows = np.array(last_data).astype(float)\n",
        "   #data_windows = np.array([data_windows])\n",
        "   #data_windows = self.normalise_windows(data_windows, single_window=False) if normalise else data_windows\n",
        "  data_windows = normalise_windows(data_windows, single_window=True) if normalise else data_windows # True , потому что мы передаем data_windows для предсказания без объемов, поэтому это одно окошко (2 - 1:17:56 + 1:19:30)\n",
        "  return data_windows"
      ],
      "metadata": {
        "id": "Ue5YIjva-fnt"
      },
      "execution_count": 390,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict_prices = get_last_data(-(sequence_length-1), False)\n",
        "\n",
        "# last_data_2_predict_prices_1st_price = last_data_2_predict_prices [0][0]\n",
        "# last_data_2_predict = get_last_data(-(sequence_length-1), True)\n",
        "# # Если последнюю нормализацию поставить на False, то мы увидим последние данные из csv таблицы\n",
        "# print(\"*** \", -(sequence_length-1 ), last_data_2_predict.size, \"***\")\n"
      ],
      "metadata": {
        "id": "rg-gqSrO_w5c"
      },
      "execution_count": 391,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict_prices # не нормализованные цены"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqUOk0jbmLtK",
        "outputId": "0ff7629e-d253-40ee-de95-56815507f248"
      },
      "execution_count": 392,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[3.1500000e+02, 9.8246810e+06],\n",
              "       [3.2440000e+02, 6.9783640e+06],\n",
              "       [3.2680000e+02, 6.1409640e+06],\n",
              "       [3.2066000e+02, 4.3078530e+06],\n",
              "       [3.0750000e+02, 9.9680710e+06],\n",
              "       [3.0979000e+02, 1.5414909e+07],\n",
              "       [2.9695000e+02, 2.4103057e+07],\n",
              "       [3.0040000e+02, 1.3391986e+07],\n",
              "       [2.9744000e+02, 8.2036480e+06],\n",
              "       [2.8064000e+02, 1.4631293e+07],\n",
              "       [2.8490000e+02, 1.8527850e+07],\n",
              "       [2.8665000e+02, 8.7523500e+06],\n",
              "       [2.9589000e+02, 1.3470559e+07],\n",
              "       [2.9490000e+02, 1.0979608e+07],\n",
              "       [2.8840000e+02, 7.9696720e+06],\n",
              "       [2.9170000e+02, 6.4957570e+06],\n",
              "       [2.9400000e+02, 6.5509930e+06],\n",
              "       [2.9280000e+02, 5.5542710e+06],\n",
              "       [2.9389000e+02, 3.7675550e+06],\n",
              "       [2.9568000e+02, 3.6175280e+06],\n",
              "       [2.9500000e+02, 3.7849850e+06],\n",
              "       [2.9351000e+02, 3.7676200e+06],\n",
              "       [2.9349000e+02, 4.2567960e+06],\n",
              "       [3.0547000e+02, 5.0183500e+06],\n",
              "       [3.0424000e+02, 5.3270420e+06],\n",
              "       [2.8701000e+02, 7.0017630e+06],\n",
              "       [2.9392000e+02, 7.9382440e+06],\n",
              "       [2.9169000e+02, 6.7428670e+06],\n",
              "       [2.9188000e+02, 5.8921530e+06],\n",
              "       [2.9040000e+02, 8.1822570e+06],\n",
              "       [2.7250000e+02, 2.1155619e+07],\n",
              "       [2.6100000e+02, 4.0632869e+07],\n",
              "       [2.5778000e+02, 2.4868925e+07],\n",
              "       [2.3470000e+02, 4.8406108e+07],\n",
              "       [2.4486000e+02, 3.6095899e+07],\n",
              "       [2.5461000e+02, 3.2911510e+07],\n",
              "       [2.4690000e+02, 2.9569067e+07],\n",
              "       [2.3697000e+02, 3.2582995e+07],\n",
              "       [2.3959000e+02, 2.3259697e+07],\n",
              "       [2.3690000e+02, 2.2488086e+07],\n",
              "       [2.5429000e+02, 3.0130665e+07],\n",
              "       [2.5782000e+02, 2.0418032e+07],\n",
              "       [2.6942000e+02, 1.5619224e+07],\n",
              "       [2.6470000e+02, 1.7039614e+07],\n",
              "       [2.6100000e+02, 1.7021508e+07],\n",
              "       [2.5079000e+02, 1.5116578e+07],\n",
              "       [2.5653000e+02, 1.2703518e+07],\n",
              "       [2.5761000e+02, 8.5588210e+06],\n",
              "       [2.6980000e+02, 1.6152695e+07]])"
            ]
          },
          "metadata": {},
          "execution_count": 392
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QbAavb9cA0pd"
      },
      "execution_count": 392,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IkZKlr6nDK-T"
      },
      "execution_count": 392,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict_prices = get_last_data(-(sequence_length-1), False)\n",
        "last_data_2_predict_prices_1st_price = last_data_2_predict_prices[0][0]\n",
        "last_data_2_predict_prices_max = max(last_data_2_predict_prices[:,0])\n",
        "last_data_2_predict_prices_min = min(last_data_2_predict_prices[:,0])\n",
        "\n",
        "last_data_2_predict_prices_1st_price, last_data_2_predict_prices_max, last_data_2_predict_prices_min\n",
        "# last_data_2_predict_prices_1st_price - столько стоил Сбер 49 дней назад, это первый элемент в последней последовательности. По сути для данного типа нормализации не нужно. Нужны минимум и максимум"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3AX1iCsJuyQ",
        "outputId": "89d374c0-c972-4aec-a6fb-12046b4041f4"
      },
      "execution_count": 393,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(315.0, 326.8, 234.7)"
            ]
          },
          "metadata": {},
          "execution_count": 393
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict = get_last_data(-(sequence_length-1), True) # теперь передаем сюда с нормализацией\n",
        "# Если последнюю нормализацию поставить на False, то мы увидим последние данные из csv таблицы\n",
        "print(\"*** \", -(sequence_length-1 ), last_data_2_predict.size, \"***\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TUCcMptyn4J-",
        "outputId": "05a78f9f-9a91-47db-a38e-c7fc7b3adf83"
      },
      "execution_count": 394,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "***  -49 98 ***\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict # нормализованные цены\n",
        "# 50:00 - Самая большая ошибка: обрубить свечной график и учитывать только цены закрытия\n",
        "# 51:00 - В начале в cols перечислить другое кол-во элементов и нейросеть сформируется под новые параметры.\n",
        "# При этом нужно изменить input_dim\n",
        "# !!!Нормализация объемов не сработала!!! 59:00 - Возможно сильно объем поменялся и нормализация не сработала\n",
        "# 1:02:30 - Рассказывает что нужно сделать"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p8sK4FVsnldw",
        "outputId": "c96f456d-0718-44ad-c284-27ef08e51248"
      },
      "execution_count": 395,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.87187839, 0.13858785],\n",
              "        [0.97394137, 0.07503779],\n",
              "        [1.        , 0.05634106],\n",
              "        [0.93333333, 0.01541297],\n",
              "        [0.79044517, 0.14178934],\n",
              "        [0.81530945, 0.26340154],\n",
              "        [0.67589577, 0.45738286],\n",
              "        [0.71335505, 0.2182355 ],\n",
              "        [0.68121607, 0.10239485],\n",
              "        [0.49880565, 0.24590565],\n",
              "        [0.54505972, 0.33290455],\n",
              "        [0.5640608 , 0.11464579],\n",
              "        [0.66438654, 0.21998981],\n",
              "        [0.65363735, 0.16437404],\n",
              "        [0.58306189, 0.09717084],\n",
              "        [0.61889251, 0.06426256],\n",
              "        [0.64386536, 0.06549583],\n",
              "        [0.63083605, 0.04324189],\n",
              "        [0.64267101, 0.00334967],\n",
              "        [0.66210641, 0.        ],\n",
              "        [0.65472313, 0.00373883],\n",
              "        [0.63854506, 0.00335112],\n",
              "        [0.6383279 , 0.01427301],\n",
              "        [0.76840391, 0.03127632],\n",
              "        [0.75504886, 0.03816852],\n",
              "        [0.5679696 , 0.07556022],\n",
              "        [0.64299674, 0.09646914],\n",
              "        [0.61878393, 0.06977982],\n",
              "        [0.62084691, 0.05078583],\n",
              "        [0.60477742, 0.10191725],\n",
              "        [0.41042345, 0.39157506],\n",
              "        [0.28555917, 0.82644596],\n",
              "        [0.25059718, 0.47448249],\n",
              "        [0.        , 1.        ],\n",
              "        [0.11031488, 0.72514849],\n",
              "        [0.21617807, 0.65405025],\n",
              "        [0.13246471, 0.57942313],\n",
              "        [0.02464712, 0.64671546],\n",
              "        [0.05309446, 0.43855306],\n",
              "        [0.02388708, 0.42132521],\n",
              "        [0.21270358, 0.59196199],\n",
              "        [0.25103149, 0.37510687],\n",
              "        [0.37698154, 0.26796331],\n",
              "        [0.3257329 , 0.29967652],\n",
              "        [0.28555917, 0.29927227],\n",
              "        [0.17470141, 0.25674067],\n",
              "        [0.23702497, 0.20286399],\n",
              "        [0.24875136, 0.11032484],\n",
              "        [0.38110749, 0.27987418]]])"
            ]
          },
          "metadata": {},
          "execution_count": 395
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "last_data_2_predict_prices # теперь эти данные можно послать в нейросеть, чтобы спрогнозировать следующую свечу (2 - 1:18:30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONk3hT4JooZu",
        "outputId": "ab3be910-9f2b-46b7-9f6c-8b79ca00d6fb"
      },
      "execution_count": 396,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[3.1500000e+02, 9.8246810e+06],\n",
              "       [3.2440000e+02, 6.9783640e+06],\n",
              "       [3.2680000e+02, 6.1409640e+06],\n",
              "       [3.2066000e+02, 4.3078530e+06],\n",
              "       [3.0750000e+02, 9.9680710e+06],\n",
              "       [3.0979000e+02, 1.5414909e+07],\n",
              "       [2.9695000e+02, 2.4103057e+07],\n",
              "       [3.0040000e+02, 1.3391986e+07],\n",
              "       [2.9744000e+02, 8.2036480e+06],\n",
              "       [2.8064000e+02, 1.4631293e+07],\n",
              "       [2.8490000e+02, 1.8527850e+07],\n",
              "       [2.8665000e+02, 8.7523500e+06],\n",
              "       [2.9589000e+02, 1.3470559e+07],\n",
              "       [2.9490000e+02, 1.0979608e+07],\n",
              "       [2.8840000e+02, 7.9696720e+06],\n",
              "       [2.9170000e+02, 6.4957570e+06],\n",
              "       [2.9400000e+02, 6.5509930e+06],\n",
              "       [2.9280000e+02, 5.5542710e+06],\n",
              "       [2.9389000e+02, 3.7675550e+06],\n",
              "       [2.9568000e+02, 3.6175280e+06],\n",
              "       [2.9500000e+02, 3.7849850e+06],\n",
              "       [2.9351000e+02, 3.7676200e+06],\n",
              "       [2.9349000e+02, 4.2567960e+06],\n",
              "       [3.0547000e+02, 5.0183500e+06],\n",
              "       [3.0424000e+02, 5.3270420e+06],\n",
              "       [2.8701000e+02, 7.0017630e+06],\n",
              "       [2.9392000e+02, 7.9382440e+06],\n",
              "       [2.9169000e+02, 6.7428670e+06],\n",
              "       [2.9188000e+02, 5.8921530e+06],\n",
              "       [2.9040000e+02, 8.1822570e+06],\n",
              "       [2.7250000e+02, 2.1155619e+07],\n",
              "       [2.6100000e+02, 4.0632869e+07],\n",
              "       [2.5778000e+02, 2.4868925e+07],\n",
              "       [2.3470000e+02, 4.8406108e+07],\n",
              "       [2.4486000e+02, 3.6095899e+07],\n",
              "       [2.5461000e+02, 3.2911510e+07],\n",
              "       [2.4690000e+02, 2.9569067e+07],\n",
              "       [2.3697000e+02, 3.2582995e+07],\n",
              "       [2.3959000e+02, 2.3259697e+07],\n",
              "       [2.3690000e+02, 2.2488086e+07],\n",
              "       [2.5429000e+02, 3.0130665e+07],\n",
              "       [2.5782000e+02, 2.0418032e+07],\n",
              "       [2.6942000e+02, 1.5619224e+07],\n",
              "       [2.6470000e+02, 1.7039614e+07],\n",
              "       [2.6100000e+02, 1.7021508e+07],\n",
              "       [2.5079000e+02, 1.5116578e+07],\n",
              "       [2.5653000e+02, 1.2703518e+07],\n",
              "       [2.5761000e+02, 8.5588210e+06],\n",
              "       [2.6980000e+02, 1.6152695e+07]])"
            ]
          },
          "metadata": {},
          "execution_count": 396
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# запрашиваем нормализацию максимума и минимума"
      ],
      "metadata": {
        "id": "PLAXqpiPj_fC"
      },
      "execution_count": 397,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions2 = model.predict(last_data_2_predict)\n",
        "print(predictions2, predictions2 [0][0])\n",
        "# простое предсказание"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KnjZhJmbKPHs",
        "outputId": "be44129f-e950-4fbb-a276-4367adaa1c54"
      },
      "execution_count": 398,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 2s 2s/step\n",
            "[[0.26660824]] 0.26660824\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#денормализация\n",
        "def de_normalise_predicted(price_max, price_min, _data):\n",
        "  return (_data*(price_max - price_min) + price_min)"
      ],
      "metadata": {
        "id": "fU7KHB-hLcc7"
      },
      "execution_count": 399,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_price = de_normalise_predicted(last_data_2_predict_prices_max, last_data_2_predict_prices_min, predictions2[0][0])\n",
        "predicted_price"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KcqJWULUMMe_",
        "outputId": "47bcb52b-f87f-4a6e-f035-f2175f4f02ae"
      },
      "execution_count": 400,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "259.2546187400818"
            ]
          },
          "metadata": {},
          "execution_count": 400
        }
      ]
    }
  ]
}